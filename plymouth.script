# Author: DoOnlineNL
# Original: 'Darwin Plymouth' and Updated by https://github.com/navisjayaseelan
# Contribution Rules: Use Tabs and Describe every Callback Function with a Comment like '# Set ** ** ** on Callback' etc

# Set Logo File and Background Graphics
logo.image = Image("boot.png");
Window.SetBackgroundTopColor(55, 55, 55);
Window.SetBackgroundBottomColor(55, 55, 55);

# Check for Shutdown Codes
if (Plymouth.GetMode () == "shutdown")
{
	a = Math.Random ();
	if (a <= 0.5)
		if (a <= 0.25)
			if (a <= 0.125)
				if (a <= 0.0625)
					if (a <= 0.03125)
						logo.image = Image("boot.png");
					else
						logo.image = Image("boot.png");
				else
					logo.image = Image("boot.png");
			else
				logo.image = Image("boot.png");
		else
			logo.image = Image("boot.png");
	else
		logo.image = Image("boot.png");
}

# Set Logo Graphics
logo.sprite = Sprite(logo.image);
logo.sprite.SetX (Window.GetX() + Window.GetWidth()  / 2 - logo.image.GetWidth()  / 2);
logo.sprite.SetY (Window.GetY() + Window.GetHeight() / 2 - logo.image.GetHeight() / 2);
logo.sprite.SetOpacity (1);

# Setup Dialog Graphics for Encrypted Drives etc
status = "normal";
fun dialog_setup()
{
	local.box;
	local.lock;
	local.entry;

	box.image = Image("box.png");
	lock.image = Image("lock.png");
	entry.image = Image("entry.png");

	box.sprite = Sprite(box.image);
	box.x = Window.GetX() + Window.GetWidth()  / 2 - box.image.GetWidth ()/2;
	box.y = Window.GetY() + Window.GetHeight() / 2 - box.image.GetHeight()/2;
	box.z = 10000;
	box.sprite.SetPosition(box.x, box.y, box.z);

	lock.sprite = Sprite(lock.image);
	lock.x = box.x + box.image.GetWidth()/2 - (lock.image.GetWidth() + entry.image.GetWidth()) / 2;
	lock.y = box.y + box.image.GetHeight()/2 - lock.image.GetHeight()/2;
	lock.z = box.z + 1;
	lock.sprite.SetPosition(lock.x, lock.y, lock.z);

	entry.sprite = Sprite(entry.image);
	entry.x = lock.x + lock.image.GetWidth();
	entry.y = box.y + box.image.GetHeight()/2 - entry.image.GetHeight()/2;
	entry.z = box.z + 1;
	entry.sprite.SetPosition(entry.x, entry.y, entry.z);

	global.dialog.box = box;
	global.dialog.lock = lock;
	global.dialog.entry = entry;
	global.dialog.bullet_image = Image("bullet.png");
	dialog_opacity (1);
}

# Set Fading Dialog Opacity 
fun dialog_opacity(opacity)
{
	global.dialog.box.sprite.SetOpacity (opacity);
	global.dialog.lock.sprite.SetOpacity (opacity);
	global.dialog.entry.sprite.SetOpacity (opacity);
	for (index = 0; global.dialog.bullet[index]; index++)
	{
		global.dialog.bullet[index].sprite.SetOpacity(opacity);
	}
}

# Set Default Graphics on Callback without Dialog
fun display_normal_callback ()
{
	global.status = "normal";
	if (global.dialog)
		dialog_opacity (0);
}

# Set Password Dialog Graphics on Callback
fun display_password_callback (prompt, bullets)
{
	global.status = "password";
	if (!global.dialog)
		dialog_setup();
	else
		dialog_opacity(1);
		for (index = 0; dialog.bullet[index] || index < bullets; index++)
		{
			if (!dialog.bullet[index])
			{
				dialog.bullet[index].sprite = Sprite(dialog.bullet_image);
				dialog.bullet[index].x = dialog.entry.x + index * dialog.bullet_image.GetWidth();
				dialog.bullet[index].y = dialog.entry.y + dialog.entry.image.GetHeight() / 2 - dialog.bullet_image.GetHeight() / 2;
				dialog.bullet[index].z = dialog.entry.z + 1;
				dialog.bullet[index].sprite.SetPosition(dialog.bullet[index].x, dialog.bullet[index].y, dialog.bullet[index].z);
			}
			if (index < bullets)
				dialog.bullet[index].sprite.SetOpacity(1);
			else
				dialog.bullet[index].sprite.SetOpacity(0);
		}
}

# Call Dialog Functions
Plymouth.SetDisplayNormalFunction(display_normal_callback);
Plymouth.SetDisplayPasswordFunction(display_password_callback);

# Set Default Loading Graphics
if (Plymouth.GetMode () == "boot")
{
	# Set Image and use Sprite for Loading Graphics
	progress_box.image = Image("progress_box.png");
	progress_box.sprite = Sprite(progress_box.image);
	
	# Set Loading Graphics Location on Screen
	progress_box.x = Window.GetX() + Window.GetWidth() / 2 - progress_box.image.GetWidth() / 2;
	progress_box.y = Window.GetY() + Window.GetHeight() * 0.65 - progress_box.image.GetHeight() / 2;
	progress_box.sprite.SetPosition(progress_box.x, progress_box.y, 0);

	# Set Image and use Sprite for Loading Graphics
	progress_bar.original_image = Image("progress_bar.png");
	progress_bar.sprite = Sprite();
	
	# Set Loading Graphics Location on Screen
	progress_bar.x = Window.GetX() + Window.GetWidth()  / 2 - progress_bar.original_image.GetWidth() / 2;
	progress_bar.y = Window.GetY() + Window.GetHeight() / 2 * 1.3 - progress_box.image.GetHeight() / 2 +  (progress_box.image.GetHeight() - progress_bar.original_image.GetHeight()) / 2;
	progress_bar.sprite.SetPosition(progress_bar.x, progress_bar.y, 1);

	# Set & Calculate Loading Graphics Progress on Callback
	fun progress_callback (duration, progress)
	{
		if (progress_bar.image.GetWidth () != Math.Int (progress_bar.original_image.GetWidth () * progress * 2))
		{
			progress_bar.image = progress_bar.original_image.Scale(progress_bar.original_image.GetWidth(progress_bar.original_image) * progress, progress_bar.original_image.GetHeight());
	  		progress_bar.sprite.SetImage (progress_bar.image);
		}
	}
	
	# Call Calculation Function
	Plymouth.SetBootProgressFunction(progress_callback);
}

# Hide Loading & Logo Graphics on 100% Progress Callback
fun quit_callback ()
{
	logo.sprite.SetOpacity (1);
}

# Call Final 100% Progress Graphics Function
Plymouth.SetQuitFunction(quit_callback);

# Set Dialog Message Graphics
message_sprites = [];
message_sprite_count = 0;
message_sprite_y = 10;

# Set Message Graphics on Callback
fun display_message_callback (text)
{
	my_image = Image.Text(text, 1, 1, 1);
	message_sprites[message_sprite_count] = Sprite(my_image);
	message_sprites[message_sprite_count].SetPosition(10, message_sprite_y, 10000);
	message_sprites[message_sprite_count].text = text;
	message_sprite_count++;
	message_sprite_y += my_image.GetHeight();
}

# Hide Message Graphics on Callback
fun hide_message_callback (text)
{
	for (i = 0; i < message_sprite_count; i++)
	{
		if (message_sprites[i].text == text)
			message_sprites[i] = NULL;
	}
}

# Call Message Graphics Functions on Event
Plymouth.SetDisplayMessageFunction (display_message_callback);
Plymouth.SetHideMessageFunction (hide_message_callback);

# Plymouth McOSX Theme by DoOnlineNL (Modified version of 'Darwin Plymouth')
